[user]
	email = elvis@reflex.dev
	name = elvis kahoro

[alias]

	a = "!gt add"
	aa = "!gt add ."
	aaa = aa
	aaaa = aa
    absorb = "!gt absorb"
    ab = absorb
    abb = absorb
    abn = absorb
    cab = asborb
	ap = "!gt add --patch"
	au = "!gt add -u"
    aiu = au
    ai = au
    aui = au
    gau = au
    aq = au
	qu = au
	auy = au
    auu = au
	aug = au
	ua = au
	aui = au
    gau = au
    auq = au
    aau = au
    dau = au
    gau = au
    aug = au
    auca = "!gt au && gt ca"

	bc = "!gt create"
    bcx = bc
    bcdl = bc
    cdl = bc
	cb = bc
	bce = bc
	gbc = branch -c
	bcn = "!gt branch create --no-verify"
	be = "!gt downstack edit"
    gbl = branch -a
	bl = branch --list
	bd = "!f() { if [ $# -eq 0 ]; then gt down; else gt down $1; fi }; f"
    bds = bd
	db = bd
	bp = bd
    gbd = bd
	bdd = "!gt down && git diff HEAD~$1"
	bdl = "!gt branch delete"
	brd = "!gt branch unbranch"
	gbrd = branch -D
    brvd = grbd
    brd = gbrd
	gdd = gbrd
	grd = gbrd
	gbdd = gdd
	grbd = gbrd
    gbtd = gbrd
    gbr = gbrd
    gbd = gbrd
	brf = "!gt branch fold"
	brsf = brf
	brn = "!gt rename"
    rbn = brn
	brsp = "!gt split"
	bsp = brsp
	brsq = "!gt squash"
    brrsq = brsq
	brt = "!gt track"
	bt = brt
    btt = bt
    btm = "!gt bottom"
	bu = "!f() { if [ $# -eq 0 ]; then gt up; else gt up $1; fi }; f"
	bn = bu
    by = bu
	u = bu
    nu = bu
    buu = bu
    dbu = bu
    lbu = bu
    ub = bu
    bug = bu
    gbu = bu
    buy = bu
    buff = "!gt up && git push --force"
	#bucc = "!gt upstack test 'trunk check --fix --ignore-git-state'"
    bucc = "!gt up && trunk check --fix --filter=-trivy,-checkov,-osv-scanner,-semgrep"
    bcc = bucc
    buc = bucc
    bud = "!gt up && git diff HEAD~$1"
    bca = "!gt up && trunk check --fix --ignore-git-state --filter=-trivy,-checkov,-osv-scanner"

	ca = "!gt modify"
    ac = ca
	aca = ca
    cva = ca
	gca = commit --amend --no-edit
	cam = "!gt modify"
    acm = cam
	cma = cam
	canm = cam
	cc = "!trunk check --fix --filter=-trivy,-checkov,-osv-scanner,-semgrep"
    gcc = cc
	cca = "!trunk check --fix --all --ignore-git-state" 
	#cca = "!trunk check --fix --all --ignore-git-state --filter=-trivy,-checkov,-osv-scanner,-trufflehog"
    cac = cca
    ccc = cca
    ccca = cca
	ch = checkout
    gh = checkout
    hc = checkout
    bch = checkout
    hch = checkout
    gcvo = checkout

	chr = checkout run
    cloen = clone
	cr = chr
	check = "!trunk check"
	co = "! gt modify -c"
	gco = commit
    gcxo = gco
	gso = gco
	ggco = gco
    comit = gco
    goc = gco
    gcp = gco
	com = "!gt commit -m"
	con = "!gt commit create --no-verify"
	gcon = commit --no-verify
	ct = "!gt continue"
    ctr = ct
	continue = ct
	cp = "!gt cherry-pick"
	cpa = "!gt cherry-pick --abort"
	cpc = "!gt cherry-pick --continue"

	d = "!f() { if [ $# -eq 0 ]; then git diff; else git diff HEAD~$1; fi }; f"
    f = d
    dd = d 1
    d1 = d 1
	dc = "!gt diff --cached"
    dcd = dc
	ddc = dc
	ds = "!f() { if [ $# -eq 0 ]; then git show --name-only; else git log --name-only -$1; fi }; f"
	dsr = "!gt downstack restack"
	dst = "!gt downstack test"
	dl = "!f() { if [ $# -eq 0 ]; then git diff-tree --no-commit-id --name-status -r HEAD; else git diff-tree --no-commit-id --name-status -r HEAD~$1; fi }; f"
    gdl = dl
    dk = dl
	ld = dl
	dls = dl
    ldl = dl
    ddl = dl
	du = "!less $(git ls-files --others --exclude-standard)"
    drun = branch -D run

    g = "!git"
    get = "!gt get"

    iit = init
    int = init
    inti = init

    l = "!gt log --reverse --show-untracked"
    al = l
    k = l
    sl = l
	ll = "!gt log short --reverse --show-untracked"
	ls = ll
	gl = log
	lt = log --oneline

	m = checkout main
    gm = m
    dm = m

	o = "!gh pr view --web || gh repo view --web"
	open = o
	go = "!gt pr"
    gfo = go
	onto = "!gt upstack onto"

	pbd = "!git push --no-verify origin --delete $(git branch --show-current)"
	pbf = "!gt push -u origin HEAD"
	pbdf = "!git push --no-verify origin --delete $(git branch --show-current) && git push --no-verify -u origin HEAD"
	pl = "!gt pull"
    poull = pl
    pou = pl
    pul = pl
    oul = pl
    oull = pl
	plm = "!gt fetch origin main:main"
	pom = pull origin main
	prev = "!f() { if [ $# -eq 0 ]; then git checkout HEAD^1; else git checkout HEAD^$1; fi }; f"
	prv = "!gt pr"
	gpr = "!gh pr create --web"
    pushj = push
    psu = push
    pus = push
    pusj = push
    psuh = push
    ppush = push
    psh = push
    puh = push
    poush = push
    oush = push
    piush = push
    puff = push --force

    rse = rs
	r = "!f() { if [ $# -eq 0 ]; then git reset; else git reset HEAD~$1 --mixed; fi }; f"
    rest = r
    reet = r
    rset = r
    rst = r
    reest = r
    res = r
    e = r
    rcb= "!vim ~/.bashrc"
    rcg= "!vim ~/.gitconfig"
    reabse = rebase
    rebse = rebase
    rebae = rebase
	rb = "!gt rebase"
	rba = "!gt rebase --abort"
	rbm = "!gt rebase main"
	rbc = "!gt continue"
	grbc = rebase --continue
    reo = "!gt reorder"
    rr = "!reflex run"
	rs = "!gt sync"

	s = status
    sg = s
    gs = s
	ss = "!gt submit --cli --ai"
	ssg = "!gh pr create --web"
	ssp = "!gh pr create --web"
	sw = "!gt switch"
	swc = "!gt switch -c"
	sh = "!f() { if [ $# -eq 0 ]; then git show; else git show HEAD~$1; fi }; f"
	gsq = "!f() { if [ $# -gt 2 ]; then echo "must be more than one"; else git rebase -i HEAD~$1; fi }; f"
	sta = "!gt stash"
    atash = sta
    tas = sta
    stah = sta
    stahs = sta
    stsh = sta
    stsa = sta
    tsash = sta
	bta = sta
    stahs = sta
    tash = sta
	stp = "!gt stash pop"
    spt = stp
    stop = stp
    tp = stp
    sto = stp
    sp = stp
	st = "!gt stash --patch"
    ta = st
	stau = "!gt stash --include-untracked"
    stcc = "!gt stash clear"
	std = "!gt stash drop"
    setd = std
    stdt = std
    sted = std
	std2 = "!gt stash drop && gt stash drop"
	stl = "!gt stash list"
	sts = "!gt stash show"
	sinit = submodule init
	su = submodule update
	sur = submodule update --init --recursive
	sinitr = sur
	smain = "!git submodule foreach --recursive `git checkout main`"
	spull =  "!git submodule foreach --recursive `git pull`"
	spush = "!f() { if [ $# -eq 0 ]; then git submodule foreach --recursive "git add ."; git submodule foreach --recursive "git commit -m c"; git push --recurse-submodules=on-demand; else git submodule foreach --recursive "git add ."; git submodule foreach --recursive "git commit -m $1"; git push --recurse-submodules=on-demand; fi } f"
    staash = stash
	sstash = submodule foreach --recursive "git stash"
    sync = "!gt sync"

	t = "!pytest --ignore-glob='*/pycord/*' --import-mode=prepend"
	test = "!pre-commit run --all-files"
    to = "!gt pr"
	top = "!gt top"
    vtop = top
    op = top
    otp = top
	topd = "!gt top && gt down"
	topn = topd
	topb = topd

	uso = "!gt move"
    usi = uso
    usoi = uso
	usso = uso
    uos = uso
    suo = uso
    usp = uso
	pusr = "!git push && gt restack --upstack"
    psr = pusr
	usr = "!gt restack --upstack"
	us = usr
	uisr = usr
	usir = usr
	usrt = usr
	sur = usr
	ust = "!gt upstack test"

	x = checkout -
	count-lines = "! git log --author=\"$1\" --pretty=tformat: --numstat | awk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: %s, removed lines: %s, total lines: %s\\n\", add, subs, loc }' #"

[init]
	defaultBranch = main

[fetch]
	prune = true

[pull]
	rebase = true

[push]
	default = simple
	autoSetupRemote = true

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true

[core]
	excludesfile = /Users/elvis/.gitignore_global
	editor = vim
	pager = delta

[color]
	status = auto
	diff = auto
	branch = auto
	interactive = auto
	grep = auto
	ui = auto

[interactive]
    diffFilter = delta --color-only

[delta]
	navigate = true    # use n and N to move between diff sections
	light = false      # set to true if you're in a terminal w/ a light background color (e.g. the default macOS terminal)
	line-numbers = true
	minus-style = red "#ffeeee"
	plus-style = green "#383830"
    side-by-side = false

[stash]
    showStat = true
    showPatch = true

[merge]
	conflictstyle = diff3

[diff]
	colorMoved = default

[http]
	cookiefile = ~/.config/.gitcookies

[commit]
	template = ~/.config/git/.gitmessage
[credential "https://github.com"]
	helper = /opt/homebrew/bin/gh auth git-credential

[credential "https://source.developers.google.com"]
	helper = gcloud.sh
