[user]
	email = ekk0809@gmail.com
	name = elvis kahoro
[core]
	excludesfile = /Users/elvis/.gitignore_global
	editor = vim
[push]
  	default = simple
[color]
	status = auto
	diff = auto
	branch = auto
	interactive = auto
	grep = auto
	ui = auto
[alias]
    a = add
    au = add -u
    aa = add --all
	bc = checkout -b
	bd = branch -D
	bl = branch
	bm = branch --merged
	blr = branch -a
	bn = branch --no-merged
	ch = checkout
	ca = commit --amend --no-edit
    caa = commit -a --amend -C HEAD
    cm = commit -m
    co = commit
    cp = commit -p
    d = "!f() { if [ $# -eq 0 ]; then git diff; else git diff HEAD~$1; fi }; f"
    dc = diff --staged
    df = "!f() { if [ $# -eq 0 ]; then git diff-tree --no-commit-id --name-status -r HEAD; else git diff-tree --no-commit-id --name-status -r HEAD~$1; fi }; f"
    l = checkout - 
    lb = switch -
    ls = log --oneline
    m = checkout main
    n = reset HEAD@{1}
    p = checkout HEAD^1
    pf = "!git push origin HEAD"
    pb = "!git push -u origin $(git branch-name)"
    pbd = "!git push origin :$(git branch-name)"
    pl = pull
    pu = push
    r = "!f() { if [ $# -eq 0 ]; then git reset --mixed; else git reset HEAD~$1 --mixed; fi }; f"
    rba = rebase --abort
    rbm = rebase main
    rbc = rebase --continue
	s = status
    sh = "!f() { if [ $# -eq 0 ]; then git show; else git show HEAD~$1; fi }; f"
    sq = "!f() { if [ $# -gt 2 ]; then echo "must be more than one"; else git rebase -i HEAD~$1; fi }; f"
    st = stash --patch
    sta = stash
	stau = stash --include-untracked
    std = stash drop
    stl = stash list
    stp = stash pop
    sts = stash show
    si = submodule init
	su = submodule update
    sur = submodule update --init --recursive
	smain = submodule foreach --recursive "git checkout main"
	spull = submodule foreach --recursive "git pull"
    spush = "!f() { if [ $# -eq 0 ]; then git submodule foreach --recursive "git add ."; git submodule foreach --recursive "git commit -m c"; git push --recurse-submodules=on-demand; else git submodule foreach --recursive "git add ."; git submodule foreach --recursive "git commit -m $1"; git push --recurse-submodules=on-demand; fi } f"
	sstash = submodule foreach --recursive "git stash"
    # sba = "!f() { git subtree add --prefix $2 $1 master --squash; }; f"
    # bclean = "!f() { git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs -r git branch -d; }; f"
    # new = !sh -c 'git log $1@{1}..$1@{0} "$@"'
    # sortdiff = !sh -c 'git diff "$@" | grep "^[+-]" | sort --key=1.2 | uniq -u -s1'
    # lg1 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
    # lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	required = true
	process = git-lfs filter-process
[http]
	cookiefile = ~/.config/.gitcookies
[commit]
	template = ~/.config/git/.gitmessage
[pull]
	rebase = true
[fetch]
	prune = true
[diff]
	colorMoved = zebra
[init]
	defaultBranch = main
[credential "https://github.com"]
	helper = !/home/linuxbrew/.linuxbrew/Cellar/gh/2.3.0/bin/gh auth git-credential
